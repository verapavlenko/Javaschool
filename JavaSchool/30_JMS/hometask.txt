Реализовать сетевой чат.
Чат должен представлять собой web-приложение, которое работает с REST сервисом, реализованном с помощью Spring WEB MVC.

- Чат должен быть организован по принципу комнаты,
  т.е. в нём может участвовать одновременно множество пользователей,
  шаблон publish-subscribe.
- Система не должна сохранять предыдущие сообщения пользователей.
- Разные пользователи могут отправлять сообщения одновременно.
- При входе в систему каждый пользователь должен представиться,
  т.е. указать имя под которым будут отображаться его сообщения.
- Не допускается одновременное использование в чате одинаковых имён пользователей.
  В случае, если пользователь указывает имя, которое в данный момент используется,
  ему должно быть отправлено сообщение о необходимости выбора другого имени.
- После присоединения к чату всем участникам должно отправляться сообщение вида "Иван присоединился к чату".
- Должно существовать ограничение по числу пользователей чата - конфигурируемый параметр (по умолчанию не более 20).
- Должна существовать возможность покинуть чат без закрытия HTTP сессии (кнопка "Покинуть чат").
- При завершении HTTP сессии пользователя должны завершаться и его JMS сессии.
- При выходе из чата (окончание HTTP сессии или нажата кнопка "Покинуть чат")
  всем участникам должно отправляться сообщение вида "Иван покинул чат".

Таким образом, клиентское сообщение должно состоять из:
- элемент с сообщениями пользователей;
- элемент ввода сообщения с кнопкой "Отправить";
- кнопка "Покинуть чат".

REST сервис должен иметь методы:
- войти в чат;
- покинуть чат;
- отправить сообщение;
- получить текущие непрочитанные сообщения.

В качестве брокера сообщений можно использовать ActiveMQ.
Необходимо создать пользователю одну JMS сессию на чтение и одну на публикацию сообщений.
Текущие непрочитанные сообщения клиент может получить, если отправит AJAX запрос, который не даст возврата пока не получит новые сообщения.